// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var S$BsSpectacle = require("bs-spectacle/src/components/S.js");
var Cite$BsSpectacle = require("bs-spectacle/src/components/Cite.js");
var Deck$BsSpectacle = require("bs-spectacle/src/components/Deck.js");
var Text$BsSpectacle = require("bs-spectacle/src/components/Text.js");
var Notes$BsSpectacle = require("bs-spectacle/src/components/Notes.js");
var Quote$BsSpectacle = require("bs-spectacle/src/components/Quote.js");
var Slide$BsSpectacle = require("bs-spectacle/src/components/Slide.js");
var Heading$BsSpectacle = require("bs-spectacle/src/components/Heading.js");
var SpectacleThemeNova = require("spectacle-theme-nova");
var BlockQuote$BsSpectacle = require("bs-spectacle/src/components/BlockQuote.js");
var CodeSlide$ReactTemplate = require("./CodeSlide.bs.js");
var IndexRe = require("!!raw-loader!./examples/dynamic-dispatch/Index.re");
var IndexRe$1 = require("!!raw-loader!./examples/type-witness-adt/Index.re");
var IndexRe$2 = require("!!raw-loader!./examples/type-witness-gadt/Index.re");

function s(prim) {
  return prim;
}

var theme = SpectacleThemeNova.default();

var component = ReasonReact.statelessComponent("Presentation");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return ReasonReact.element(undefined, undefined, Deck$BsSpectacle.make(false, undefined, undefined, undefined, /* pacman */-476456824, Caml_option.some(theme), /* array */[/* Slide */0], undefined, undefined, undefined, /* array */[
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, "secondary", undefined, undefined, "secondary", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Better Libraries Using GADTs"])),
                                        ReasonReact.element(undefined, undefined, Text$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, S$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* italic */107228912, /* array */["Nathan Holland"]))])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "we will be using reason syntax"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Goal: a basic introduction"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "goal of this talk is not to give a complete understanding, but to motivate"), React.createElement("li", undefined, "we will look at a lot of code, don't make your goal to understand all of it, just the gist"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["Why GADTs?"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "strongly statically typed languages are great, but often type level abstraction leaks"), React.createElement("li", undefined, "GADTs can help us abstract more from the user of a library"), React.createElement("li", undefined, "they can also enable developers to write safer and more performant code"), React.createElement("li", undefined, "we will focus on library abstractions in this talk"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["An Example in the Wild: ocaml-graphql-server"]))])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Curry.app(BlockQuote$BsSpectacle.make, [
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  undefined,
                                                  /* array */[
                                                    ReasonReact.element(undefined, undefined, Curry.app(Quote$BsSpectacle.make, [
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              "24",
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              /* array */["Initially, I thought the lack of generics in Go was the root of the issue. Out of curiosity, I looked into graphql-java, and noticed that it offered equally bad type safety guarantees. [...] This was the starting point of a journey to try to implement a GraphQL library with better type safety guarantees than were offered at the time."]
                                                            ])),
                                                    ReasonReact.element(undefined, undefined, Curry.app(Cite$BsSpectacle.make, [
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              undefined,
                                                              /* array */["Andreas Garnæs - Creator of ocaml-graphql-server"]
                                                            ]))
                                                  ]
                                                ])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */["creator of ocaml-graphql-server originally tried writing a library in Go and other statically typed languages"]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["What the heck is a GADT anyway?"])),
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 3, undefined, undefined, /* array */["GADT = Generalized ADT"])),
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 3, undefined, undefined, /* array */["ADT = Algebraic Data Type"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "you may or may not have heard of them"), React.createElement("li", undefined, "you probably know what an ADT is, even if you don't recognize the name"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "type example =\n  | A\n  | B(int)\n  | C(string, float);", /* array */[{
                                          loc: /* array */[
                                            0,
                                            4
                                          ],
                                          title: "ADT"
                                        }], false, "big-code", /* array */[])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "type example('a) =\n  | A('a)\n  | B('a, int)\n  | C(list('a));", /* array */[{
                                          loc: /* array */[
                                            0,
                                            4
                                          ],
                                          title: "ADT with Type Parameter"
                                        }], false, "big-code", /* array */[])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "type example('a) =\n  | A: example(int)\n  | B(string): example(float)\n  | C(list('a)): example('a)", /* array */[{
                                          loc: /* array */[
                                            0,
                                            4
                                          ],
                                          title: "GADT"
                                        }], false, "big-code", /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Prompt"])),
                                        ReasonReact.element(undefined, undefined, Text$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Sometimes we want to represent lists containing values of multiple types (for instance, a list of strings and ints). Let's create a library in ReasonML for lists of mixed types and expose an interface which allows users of the library to map over specific types in the list."])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */["in a dynamic programming language like Javascript, this is arbitrary, but not in strongly statically typed languages like OCaml/ReasonML"]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["Example application: URL encoding string parameters"]))])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "let path = \"/api/v1/model\"\nlet parameters = [\n  (\"name\", \"Steve\")\n  (\"description\", \"The one and only\"),\n  (\"id\", 15)\n];\n\n// how can this be implemented?\nlet encodedParameters = urlEncode(parameters);\nlet url = sprintf(\"%s?%s\", path, joinParameters(encodedParameters);", /* array */[{
                                          loc: /* array */[
                                            0,
                                            13
                                          ],
                                          title: "URL Encoding Pseudo-Code"
                                        }], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "let escapeString = (string) => ...;\nmap_type(parameters, String, escapeString);\n", /* array */[{
                                          loc: /* array */[
                                            0,
                                            2
                                          ],
                                          title: "Tentative urlEncode Implementation"
                                        }], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Lists and Hlists"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */["problem: we can't just mix types in lists be default"]))
                                      ])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "let things: list(string) = [\n  \"Apple\",\n  \"4\",\n  \"3.5\"\n];\n\n// invalid!\nlet things: hlist = [\n  \"Apple\",\n  4,\n  3.5\n];", /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            5
                                          ],
                                          title: "Homogeneous List"
                                        },
                                        {
                                          loc: /* array */[
                                            6,
                                            12
                                          ],
                                          title: "Heterogeneous List"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["ADT Implementation of Hlists"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "refamiliarize ourselves with ADTs"), React.createElement("li", undefined, "provide a case to contrast against GADTs"), React.createElement("li", undefined, "prompt: heterogeneous lists"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", IndexRe$1, /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            4
                                          ],
                                          title: "Defining Values"
                                        },
                                        {
                                          loc: /* array */[
                                            5,
                                            13
                                          ],
                                          title: "Printing Values"
                                        },
                                        {
                                          loc: /* array */[
                                            14,
                                            15
                                          ],
                                          title: "Defining an Hlist"
                                        },
                                        {
                                          loc: /* array */[
                                            16,
                                            25
                                          ],
                                          title: "An Operation on Value Lists"
                                        },
                                        {
                                          loc: /* array */[
                                            18,
                                            23
                                          ]
                                        },
                                        {
                                          loc: /* array */[
                                            26,
                                            42
                                          ],
                                          title: "Using the Interface"
                                        },
                                        {
                                          loc: /* array */[
                                            27,
                                            34
                                          ],
                                          title: "Creating a List"
                                        },
                                        {
                                          loc: /* array */[
                                            34,
                                            40
                                          ],
                                          title: "Mapping Over Specific Types"
                                        },
                                        {
                                          loc: /* array */[
                                            40,
                                            41
                                          ],
                                          title: "Printing the List"
                                        },
                                        {
                                          loc: /* array */[
                                            43,
                                            49
                                          ],
                                          title: "Output"
                                        },
                                        {
                                          loc: /* array */[
                                            26,
                                            42
                                          ],
                                          title: "Analysis of the ADT Interface"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["We can do better than this!"]))])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", IndexRe$2, /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            4
                                          ],
                                          title: "Defining a Witness"
                                        },
                                        {
                                          loc: /* array */[
                                            5,
                                            13
                                          ],
                                          title: "Printing with a Witness"
                                        },
                                        {
                                          loc: /* array */[
                                            14,
                                            16
                                          ],
                                          title: "Defining an Hlist"
                                        },
                                        {
                                          loc: /* array */[
                                            14,
                                            15
                                          ],
                                          title: "Hiding a Type Parameter"
                                        },
                                        {
                                          loc: /* array */[
                                            17,
                                            31
                                          ],
                                          title: "A Higher Level Operation Hlists"
                                        },
                                        {
                                          loc: /* array */[
                                            17,
                                            24
                                          ],
                                          title: "First, a Helper"
                                        },
                                        {
                                          loc: /* array */[
                                            25,
                                            31
                                          ],
                                          title: "A Better Interface for Mapping Types"
                                        },
                                        {
                                          loc: /* array */[
                                            33,
                                            43
                                          ],
                                          title: "Using the Interface"
                                        },
                                        {
                                          loc: /* array */[
                                            33,
                                            40
                                          ],
                                          title: "Creating an Hlist"
                                        },
                                        {
                                          loc: /* array */[
                                            40,
                                            41
                                          ],
                                          title: "Mapping Over Specific Types"
                                        },
                                        {
                                          loc: /* array */[
                                            41,
                                            42
                                          ],
                                          title: "Printing the List"
                                        },
                                        {
                                          loc: /* array */[
                                            44,
                                            50
                                          ],
                                          title: "Output"
                                        },
                                        {
                                          loc: /* array */[
                                            33,
                                            43
                                          ],
                                          title: "Analysis of the GADT Interface"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["A quick note on \"Hlists\""])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "what we defined is a \"dynamic hlist\" (runtime encoded)"), React.createElement("li", undefined, "mention \"static hlists\" abstractly"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["Another example: Dynamic Dispatch"]))])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("java", "public interface DatabaseInterface<D> {\n  String[] keys();\n  D get(String str);\n  void set(String str, D data);\n}\n\npublic StringDatabase implements DatabaseInterface<String> {\n  // ...\n}\n\npublic IntDatabase implements DatabaseInterface<Int> {\n  // ...\n}", /* array */[{
                                          loc: /* array */[
                                            0,
                                            13
                                          ],
                                          title: "Dynamic Dispatch in OOP"
                                        }], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 2, undefined, undefined, /* array */["Approaching the Problem in OCaml/ReasonML"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "could use classes, but bad choice (low community knowledge, leaky abstraction)"), React.createElement("li", undefined, "raw first class modules are too leaky and verbose by themselves"), React.createElement("li", undefined, "solution: first class modules with GADTs"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "let transfer =\n  ( (module SrcDb):\n      (module Database_intf\n        with type t = 'srcDb\n         and type data = 'src),\n    srcDb: 'srcDb,\n    (module DstDb):\n      (module Database_intf\n        with type t = 'dstDb\n         and type data = 'dst),\n    dstDb: 'dstDb,\n    func: 'src => 'dst\n  ): 'dstDb =>\n    List.fold_left(\n      (db, key) =>\n        DstDb.set(db, key, func(SrcDb.get(srcDb, key)),\n      dstDb,\n      SrcDb.keys(srcDb)\n    );\n\n\n\nlet transfer =\n  ( srcDb: genericDatabase('src),\n    dstDb: genericDatabase('dst),\n    func: 'src => 'dst\n  ): genericDatabase('dst) =>\n     List.fold_left(\n       (db, key) => set(db, key, func(get(srcDb, key))),\n       dstDb,\n       keys(srcDb)\n     );", /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            19
                                          ],
                                          title: "Without a Generalized Representation"
                                        },
                                        {
                                          loc: /* array */[
                                            21,
                                            32
                                          ],
                                          title: "With a Generalized Representation (Dynamic Dispatch)"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", IndexRe, /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            8
                                          ],
                                          title: "A Signature for Databases"
                                        },
                                        {
                                          loc: /* array */[
                                            9,
                                            14
                                          ],
                                          title: "A Generalized Representation for Databases"
                                        },
                                        {
                                          loc: /* array */[
                                            15,
                                            26
                                          ],
                                          title: "Signature Supersets"
                                        },
                                        {
                                          loc: /* array */[
                                            27,
                                            37
                                          ],
                                          title: "A Functor for Generalizing Database Implementations"
                                        },
                                        {
                                          loc: /* array */[
                                            38,
                                            58
                                          ],
                                          title: "Wrapping Generalized Databases with Dynamic Dispatch"
                                        },
                                        {
                                          loc: /* array */[
                                            59,
                                            69
                                          ],
                                          title: "Creating a High Level Function"
                                        },
                                        {
                                          loc: /* array */[
                                            70,
                                            93
                                          ],
                                          title: "A Helper for Defining In Memory Databases"
                                        },
                                        {
                                          loc: /* array */[
                                            94,
                                            100
                                          ],
                                          title: "Defining Some Database Implementations"
                                        },
                                        {
                                          loc: /* array */[
                                            101,
                                            112
                                          ],
                                          title: "Using the Interface"
                                        },
                                        {
                                          loc: /* array */[
                                            113,
                                            117
                                          ],
                                          title: "Output"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Other Uses of GADTs"])),
                                        ReasonReact.element(undefined, undefined, Notes$BsSpectacle.make(/* array */[React.createElement("ul", undefined, React.createElement("li", undefined, "vects"), React.createElement("li", undefined, "static gadts"))]))
                                      ])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "let zip_list =\n  ( x: list('a),\n    y: list('b)\n  ): list(('a, 'b)) =>\n    ...\n\nlet zip_vect =\n  ( type n,\n    x: vect('a, n),\n    y: vect('b, n)\n  ): vect('a * 'b, Peano.add(n, n)) =>\n    ...\n\n// compiles\nzip_vect([1, 2, 3], [\"a\", \"b\", \"c\"]);\n\n// does not compile\nzip_vect([1, 2], [\"a\", \"b\", \"c\"]);", /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            5
                                          ],
                                          title: "Zip on Lists"
                                        },
                                        {
                                          loc: /* array */[
                                            6,
                                            12
                                          ],
                                          title: "Zip on Vects"
                                        },
                                        {
                                          loc: /* array */[
                                            13,
                                            18
                                          ],
                                          title: "Compile Time Checking"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, CodeSlide$ReactTemplate.make("reason", "type transaction('a) =\n  | GetAccount(id): transaction(account)\n  | GetPost(id): transaction(post)\n  | CreatePost(transaction(account), post): transaction(post);\n\nlet perform = (type a, transaction(a)): a =>\n  ...\n\n// compiles\nlet new_post: post = perform(CreatePost(GetAccount(0), {...}));\n\n// does not compile\nlet account: account = perform(CreatePost(GetAccount(0), {...}));\nlet new_post: post = perform(CreatePost(GetPost(0), {...}));", /* array */[
                                        {
                                          loc: /* array */[
                                            0,
                                            7
                                          ],
                                          title: "Type Safe DSLs"
                                        },
                                        {
                                          loc: /* array */[
                                            8,
                                            14
                                          ],
                                          title: "Compile Time Checking"
                                        }
                                      ], undefined, undefined, /* array */[])),
                              ReasonReact.element(undefined, undefined, Slide$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                        ReasonReact.element(undefined, undefined, Heading$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Questions?"])),
                                        ReasonReact.element(undefined, undefined, Text$BsSpectacle.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["email: nathan@o1labs.org"]))
                                      ]))
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.s = s;
exports.theme = theme;
exports.component = component;
exports.make = make;
/* theme Not a pure module */
