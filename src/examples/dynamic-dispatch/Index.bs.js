// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function Generalize(Db) {
  var create = function (args) {
    return /* GenericDatabase */[
            [
              Db[0],
              Db[1],
              Db[2]
            ],
            Curry._1(Db[/* create */3], args)
          ];
  };
  return /* module */[
          /* keys */Db[0],
          /* get */Db[1],
          /* set */Db[2],
          /* create */create
        ];
}

var compare = Caml_obj.caml_compare;

var StringMap = $$Map.Make(/* module */[/* compare */compare]);

function Make_in_memory_db(Type) {
  var create = function (param) {
    return StringMap[/* empty */0];
  };
  var keys = function (map) {
    return List.map((function (param) {
                  return param[0];
                }), Curry._1(StringMap[/* bindings */16], map));
  };
  var get = function (map, key) {
    return Curry._2(StringMap[/* find */21], key, map);
  };
  var set = function (map, key, value) {
    return Curry._3(StringMap[/* add */3], key, value, map);
  };
  return /* module */[
          /* keys */keys,
          /* get */get,
          /* set */set,
          /* create */create
        ];
}

function keys(map) {
  return List.map((function (param) {
                return param[0];
              }), Curry._1(StringMap[/* bindings */16], map));
}

function get(map, key) {
  return Curry._2(StringMap[/* find */21], key, map);
}

function set(map, key, value) {
  return Curry._3(StringMap[/* add */3], key, value, map);
}

function create(args) {
  return /* GenericDatabase */[
          [
            keys,
            get,
            set
          ],
          StringMap[/* empty */0]
        ];
}

var StringDbA = /* module */[
  /* keys */keys,
  /* get */get,
  /* set */set,
  /* create */create
];

function keys$1(map) {
  return List.map((function (param) {
                return param[0];
              }), Curry._1(StringMap[/* bindings */16], map));
}

function get$1(map, key) {
  return Curry._2(StringMap[/* find */21], key, map);
}

function set$1(map, key, value) {
  return Curry._3(StringMap[/* add */3], key, value, map);
}

function create$1(args) {
  return /* GenericDatabase */[
          [
            keys$1,
            get$1,
            set$1
          ],
          StringMap[/* empty */0]
        ];
}

var StringDbB = /* module */[
  /* keys */keys$1,
  /* get */get$1,
  /* set */set$1,
  /* create */create$1
];

function keys$2(map) {
  return List.map((function (param) {
                return param[0];
              }), Curry._1(StringMap[/* bindings */16], map));
}

function get$2(map, key) {
  return Curry._2(StringMap[/* find */21], key, map);
}

function set$2(map, key, value) {
  return Curry._3(StringMap[/* add */3], key, value, map);
}

function create$2(args) {
  return /* GenericDatabase */[
          [
            keys$2,
            get$2,
            set$2
          ],
          StringMap[/* empty */0]
        ];
}

var IntDb = /* module */[
  /* keys */keys$2,
  /* get */get$2,
  /* set */set$2,
  /* create */create$2
];

function keys$3(param) {
  return Curry._1(param[0][/* keys */0], param[1]);
}

function get$3(param, key) {
  return Curry._2(param[0][/* get */1], param[1], key);
}

function set$3(param, key, value) {
  var Db = param[0];
  return /* GenericDatabase */[
          Db,
          Curry._3(Db[/* set */2], param[1], key, value)
        ];
}

function transfer(srcDb, dstDb, func) {
  return List.fold_left((function (db, key) {
                return set$3(db, key, Curry._1(func, get$3(srcDb, key)));
              }), dstDb, keys$3(srcDb));
}

function test(param) {
  var db_a = set$3(set$3(set$3(create(/* () */0), "x", "0"), "y", "42"), "z", "-143");
  var db_b = transfer(db_a, create$1(/* () */0), (function (x) {
          return x;
        }));
  var db_c = transfer(db_b, create$2(/* () */0), Caml_format.caml_int_of_string);
  return List.iter((function (k) {
                return Curry._2(Printf.printf(/* Format */[
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ": ",
                                        /* Int */Block.__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* Char_literal */Block.__(12, [
                                                /* "\n" */10,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ]),
                                "%s: %d\n"
                              ]), k, get$3(db_c, k));
              }), keys$3(db_c));
}

test(/* () */0);

exports.Generalize = Generalize;
exports.StringMap = StringMap;
exports.Make_in_memory_db = Make_in_memory_db;
exports.StringDbA = StringDbA;
exports.StringDbB = StringDbB;
exports.IntDb = IntDb;
exports.keys = keys$3;
exports.get = get$3;
exports.set = set$3;
exports.transfer = transfer;
exports.test = test;
/* StringMap Not a pure module */
