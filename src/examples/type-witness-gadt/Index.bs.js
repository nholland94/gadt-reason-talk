// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function print(witness, value) {
  var str;
  switch (witness) {
    case 0 : 
        str = String(value);
        break;
    case 1 : 
        str = Pervasives.string_of_float(value);
        break;
    case 2 : 
        str = "\"" + (value + "\"");
        break;
    
  }
  console.log(str);
  return /* () */0;
}

function map_equal_witness(target, candidate, value, func) {
  switch (target) {
    case 0 : 
        if (candidate !== 0) {
          return value;
        } else {
          return Curry._1(func, value);
        }
    case 1 : 
        if (candidate !== 1) {
          return value;
        } else {
          return Curry._1(func, value);
        }
    case 2 : 
        if (candidate >= 2) {
          return Curry._1(func, value);
        } else {
          return value;
        }
    
  }
}

function map_type(ls, witness, func) {
  return List.map((function (param) {
                var w = param[0];
                return /* Item */[
                        w,
                        map_equal_witness(witness, w, param[1], func)
                      ];
              }), ls);
}

function test(param) {
  var ls$prime = map_type(/* :: */[
        /* Item */[
          /* Int */0,
          5
        ],
        /* :: */[
          /* Item */[
            /* String */2,
            "hello"
          ],
          /* :: */[
            /* Item */[
              /* Int */0,
              2
            ],
            /* :: */[
              /* Item */[
                /* Float */1,
                3.5
              ],
              /* :: */[
                /* Item */[
                  /* Int */0,
                  16
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ], /* Int */0, (function (n) {
          return (n << 1);
        }));
  return List.iter((function (param) {
                return print(param[0], param[1]);
              }), ls$prime);
}

test(/* () */0);

exports.print = print;
exports.map_equal_witness = map_equal_witness;
exports.map_type = map_type;
exports.test = test;
/*  Not a pure module */
